/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 public/Solar_Ground.glb 
*/

import React, { useEffect } from 'react';
import { useGLTF, useAnimations, Plane, useTexture } from '@react-three/drei';
import SolarGroundFile from '../../public/Solar_Ground.glb';
import { TextureLoader, RepeatWrapping } from 'three';
import RockyTextureFile from '../../public/textures/coast_sand_01_diff_1k.jpg';
import DisplacementTextureFile from '../../public/textures/coast_sand_01_disp_1k.png';

export function SolarGround(props) {
  const group = React.useRef();
  const { nodes, materials, animations } = useGLTF(SolarGroundFile);
  const { actions } = useAnimations(animations, group);
  const textureLoader = new TextureLoader();
  const [colorMap, displacementMap] = useTexture([RockyTextureFile, DisplacementTextureFile]);
  colorMap.repeat.set(20, 20);
  colorMap.wrapS = colorMap.wrapT = RepeatWrapping;
  displacementMap.repeat.set(20, 20);
  displacementMap.wrapS = displacementMap.wrapT = RepeatWrapping;
  // const rockyTexture = textureLoader.load(RockyTextureFile);
  // const displacementTexture = textureLoader.load(DisplacementTextureFile);
  // texture.matrixAutoUpdate = false;
  // useEffect(() => {
  //   if (typeof window !== 'undefined') {
  //     var aspect = window.innerWidth / window.innerHeight;
  //     var imageAspect = texture.image.width / texture.image.height;

  //     if (aspect < imageAspect) {
  //       texture.matrix.setUvTransform(0, 0, aspect / imageAspect, 1, 0, 0.5, 0.5);
  //     } else {
  //       texture.matrix.setUvTransform(0, 0, 1, imageAspect / aspect, 0, 0.5, 0.5);
  //     }
  //   }
  // }, []);

  return (
    <group ref={props.refs} {...props} dispose={null} receiveShadow>
      <group name='Scene' receiveShadow>
        <mesh rotation={[-Math.PI / 2, 0, 0]} receiveShadow>
          <planeGeometry args={[2000, 2000, 100, 100]} />
          <meshStandardMaterial map={colorMap} displacementMap={displacementMap} />
        </mesh>
        {/* <Plane args={[1000, 1000, 128, 128]} rotation={[-Math.PI / 2, 0, 0]} scale={(10, 0, 10)} castShadow receiveShadow> */}
        {/* <meshStandardMaterial attach='material' map={texture} displacementMap={displacementTexture} displacementScale={0.1} roughness={1} metalness={0} /> */}
        {/* </Plane> */}
      </group>
    </group>
  );
}

useGLTF.preload(SolarGroundFile);
